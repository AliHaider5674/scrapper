version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.8  # Specify the Python version you need
  pre_build:
    commands:
      - echo Pre-build phase started...
      # Add any commands to run before the build, if necessary
  build:
    commands:
      - echo "Fetching current Lambda function version"
      - export CURRENT_VERSION=$(aws lambda list-versions-by-function --function-name my-test-lambda-function --query 'Versions[-1].Version' --output text)
      - echo "Current version is $CURRENT_VERSION"
      - export NEW_VERSION=$(($CURRENT_VERSION + 1))
      - echo "New version will be $NEW_VERSION"
      - echo "Updating appspec.yml"
      - |
        cat > appspec.yml <<EOL
        version: 0.0
        resources:
          - myLambdaFunction:
              type: AWS::Lambda::Function
              properties:
                name: "my-test-lambda-function"
                alias: "lambda-alias"
                currentversion: "$CURRENT_VERSION"
                targetversion: "$NEW_VERSION"
        EOL
      - echo "Building the application"
      - zip -r lambda.zip . 
  post_build:
    commands:
      - echo Post-build phase started...
      - aws lambda update-function-code --function-name my-test-lambda-function --zip-file fileb://lambda.zip
      - |
        # Extended retry logic for publish-version command
        for i in $(seq 1 10); do
          echo "Attempt $i: Publishing new version of Lambda function"
          if aws lambda publish-version --function-name my-test-lambda-function; then
            break
          fi
          echo "Publish-version attempt $i failed due to ResourceConflictException. Retrying in 30 seconds..."
          sleep 30
        done
artifacts:
  files:
    - appspec.yml
    - lambda.zip
